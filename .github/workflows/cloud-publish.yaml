name: Publish Windows Tauri App

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  publish-windows:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js (for reading package.json & frontâ€‘end)
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: install dependencies (windows only)
        run: cargo install --force trusted-signing-cli

      - name: Install Frontend Dependencies
        run: yarn install

      - name: Extract version from package.json
        id: get_version
        shell: pwsh
        run: |
          # Grab the version from package.json
          $version = node -p "require('./package.json').version"
          # Append it to the Actions env file
          Add-Content -Path $env:GITHUB_ENV -Value "PACKAGE_VERSION=$version"

      # ----------------------------
      # Cache Rust build for Tauri Action
      # ----------------------------
      - name: Cache Rust build for Tauri Action
        uses: actions/cache@v3
        with:
          path: |
            src-tauri/target
            ~/.cargo/registry
          key: ${{ runner.os }}-tauri-${{ hashFiles('**/src-tauri/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-tauri-

      
      - name: Build & Release with Tauri Action
        uses: tauri-apps/tauri-action@v0.5.20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        with:
          tagName: ${{ env.PACKAGE_VERSION }}
          releaseName: 'Windows Release ${{ env.PACKAGE_VERSION }}'
          releaseBody: 'Windows installer and updater manifest for version ${{ env.PACKAGE_VERSION }}'
          releaseDraft: false
          prerelease: false
          args: ''